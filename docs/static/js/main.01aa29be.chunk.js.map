{"version":3,"sources":["PVT.js","Discussion.js","App.js","serviceWorker.js","index.js","pvt_sleepiness.png","subjective_sleepiness.gif"],"names":["PVT","props","state","lastSampleTime","lastFalseStart","isHidden","statsShown","timeSelected","resultText","meanReactionTime","sampleCount","lapses","falseStarts","reactionTimes","pvtType","timeEnd","reactionTime","randomRange","randomShift","flashBtn","bind","hideFeedback","this","timeout","clearTimeout","reportStats","setState","e","preventDefault","end","Date","getTime","currTime","key","feedbackTimeout","push","setTimeout","Math","random","multiplier","Paragraph","href","resetStats","onKeyDown","onKeyPressed","tabIndex","align","style","hidden","Button","onClick","ev","startFiveMinPVT","startTenMinPVT","endEarly","UnorderedList","ListItem","Component","Discussion","paddingRight","Image","src","pvtImage","width","maxWidth","subjectiveImage","size","App","selectedIndex","components","className","Pane","height","padding","alignItems","display","borderBottom","Tablist","Tab","fontSize","onSelect","paddingLeft","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.01aa29be.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Paragraph, ListItem, UnorderedList } from 'evergreen-ui';\r\n\r\nclass PVT extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lastSampleTime: 0,\r\n      lastFalseStart: false,\r\n      isHidden: true,\r\n      statsShown: false,\r\n      timeSelected: false,\r\n      resultText: ''\r\n    };\r\n    this.meanReactionTime = 0;\r\n    this.sampleCount = 0;\r\n    this.lapses = 0;\r\n    this.falseStarts = 0;\r\n    this.reactionTimes = [];\r\n\r\n    this.pvtType = '';\r\n    this.timeEnd = 0;\r\n    this.reactionTime = 0;\r\n    this.randomRange = 0;\r\n    this.randomShift = 0;\r\n\r\n    this.flashBtn = this.flashBtn.bind(this);\r\n    this.hideFeedback = this.hideFeedback.bind(this);\r\n  }\r\n\r\n  end() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n      this.timeout = null;\r\n    }\r\n    this.timeEnd = 0;\r\n    this.reportStats();\r\n    this.setState({\r\n      lastSampleTime: 0,\r\n      lastFalseStart: false,\r\n      isHidden: true\r\n    });\r\n  }\r\n\r\n  endEarly(e) {\r\n    e.preventDefault();\r\n    this.end();\r\n  }\r\n\r\n  flashBtn() {\r\n    this.setState({\r\n      isHidden: false\r\n    });\r\n    this.reactionTime = new Date().getTime();\r\n  }\r\n\r\n  hideFeedback() {\r\n    this.setState({\r\n      lastFalseStart: false,\r\n      lastSampleTime: 0\r\n    })\r\n  }\r\n\r\n  onKeyPressed(e) {\r\n    let currTime = new Date().getTime();\r\n    if (e.key === 'f' && this.timeEnd !== 0) {\r\n      // TODO implement PVT\r\n      if (this.feedbackTimeout) {\r\n        clearTimeout(this.feedbackTimeout);\r\n        this.feedbackTimeout = null;\r\n      }\r\n      if (this.state.isHidden) {\r\n        // false start\r\n        if (this.timeout) {\r\n          clearTimeout(this.timeout);\r\n          this.timeout = null;\r\n        }\r\n        this.falseStarts++;\r\n        this.setState({\r\n          lastFalseStart: true,\r\n          isHidden: true,\r\n          lastSampleTime: 0\r\n        })\r\n      } else {\r\n        this.reactionTime = currTime - this.reactionTime;\r\n        this.sampleCount++;\r\n        this.meanReactionTime = this.meanReactionTime * (this.sampleCount - 1) / (this.sampleCount) + this.reactionTime / this.sampleCount;\r\n        if (this.reactionTime > 500) {\r\n          this.lapses++;\r\n          this.reactionTimes.push(this.reactionTime);\r\n        } else if (this.reactionTime < 100) {\r\n          this.falseStarts++;\r\n        } else {\r\n          this.reactionTimes.push(this.reactionTime);\r\n        }\r\n        this.setState({\r\n          isHidden: true,\r\n          lastSampleTime: this.reactionTime,\r\n          lastFalseStart: false\r\n        });\r\n      }\r\n      this.feedbackTimeout = setTimeout(this.hideFeedback, 1000);\r\n      if (currTime > this.timeEnd) {\r\n        this.end();\r\n      } else {\r\n        this.timeout = setTimeout(this.flashBtn, (Math.random() * this.randomRange + this.randomShift) * 1000);\r\n      }\r\n    }\r\n  }\r\n\r\n  reportStats() {\r\n    let resultText = '';\r\n    let multiplier;\r\n    if (this.pvtType === '5 min') {\r\n      multiplier = 1;\r\n      // >= 2, >= 4, >= 6\r\n    } else {\r\n      // >= 4 warning, >= 8 = 1 day deprivation, >= 12 = 2 days deprivation\r\n      multiplier = 2;\r\n    }\r\n    if (this.lapses < 2 * multiplier) {\r\n      resultText = <Paragraph>Keep up the good work on getting enough sleep! Encourage others to get enough sleep as well.\r\n        For some resources on how to get more/better sleep,\r\n        you can check <a href='https://www.nhlbi.nih.gov/health-topics/sleep-deprivation-and-deficiency'>here</a>.</Paragraph>;\r\n    } else if (this.lapses < 4 * multiplier) {\r\n      resultText = <Paragraph>Try to get a little more sleep. While you haven't reached the point where . For some resources on how to get more/better sleep,\r\n        you can click <a href='https://www.nhlbi.nih.gov/health-topics/sleep-deprivation-and-deficiency'>here</a>.</Paragraph>;\r\n    } else if (this.lapses < 6 * multiplier) {\r\n      resultText = <Paragraph>Looks like you'll need to get some more or better quality sleep. Your results are similar\r\n        to people who have been totally sleep deprived for 1 day (and the effects of being partially sleep deprived for multiple nights\r\n        can accumulate to this point). For some resources on how to get more/better sleep,\r\n        you can click <a href='https://www.nhlbi.nih.gov/health-topics/sleep-deprivation-and-deficiency'>here</a>.</Paragraph>;\r\n    } else {\r\n      resultText = <Paragraph>Please make sure to get more or better quality sleep. At this point, your results mirror people who have\r\n        been totally sleep deprived for 2 days or more in research studies. For some resources on how to get more/better sleep,\r\n        you can click <a href='https://www.nhlbi.nih.gov/health-topics/sleep-deprivation-and-deficiency'>here</a>.</Paragraph>;\r\n    }\r\n    this.setState({\r\n      statsShown: true,\r\n      resultText: resultText\r\n    })\r\n  }\r\n\r\n  resetStats() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n      this.timeout = null;\r\n    }\r\n\r\n    this.meanReactionTime = 0;\r\n    this.falseStarts = 0;\r\n    this.lapses = 0;\r\n    this.sampleCount = 0;\r\n    this.reactionTimes = [];\r\n    this.setState({\r\n      isHidden: true,\r\n      statsShown: false\r\n    });\r\n  }\r\n\r\n  startFiveMinPVT(e) {\r\n    e.preventDefault();\r\n    this.resetStats();\r\n    this.pvtType = '5 min';\r\n    this.timeEnd = new Date().getTime() + 5 * 60 * 1000;\r\n    this.randomRange = 8;\r\n    this.randomShift = 2;\r\n    this.setState({\r\n      timeSelected: true\r\n    });\r\n    this.timeout = setTimeout(this.flashBtn, 2000);\r\n  }\r\n\r\n  startTenMinPVT(e) {\r\n    e.preventDefault();\r\n    this.resetStats();\r\n    this.pvtType = '10 min';\r\n    this.timeEnd = new Date().getTime() + 10 * 60 * 1000;\r\n    this.randomRange = 8;\r\n    this.randomShift = 2;\r\n    this.setState({\r\n      timeSelected: true\r\n    });\r\n    this.timeout = setTimeout(this.flashBtn, 2000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        onKeyDown={(e) => this.onKeyPressed(e)}\r\n        tabIndex={0}\r\n        align=\"left\" >\r\n        <div>\r\n          <br/>\r\n          <Paragraph>\r\n            The Psychomotor Vigilance Task (or PVT) is a test used to measure how objectively sleep deprived one is.\r\n            The focus of the test is to make sure that you have enough energy to focus on the task, which can be very different from how sleep deprived you think you are.\r\n            These tests take 5-10 minutes (but the 10 minute test is considered to be more accurate).\r\n          </Paragraph>\r\n          <br/>\r\n          <Paragraph>\r\n            <b>Instructions:</b> Press start to start either the 5 minute or 10 minute PVT. For the duration of the test, press the 'f' key as soon as possible when the red rectangle appears.\r\n          </Paragraph>\r\n          <br/>\r\n        </div>\r\n        <div style={{\"border\": \"3px solid black\", \"height\": 300, \"width\": 400}}>\r\n          <div hidden={this.state.isHidden} style={{\"width\": 250, \"height\": 200, \"background\": \"red\", \"margin\": \"50px 75px 50px 75px\"}} ></div>\r\n          {this.state.lastFalseStart && <Paragraph>False start. Wait for the red rectangle first.</Paragraph>}\r\n          {this.state.lastSampleTime > 0 && <Paragraph>Time: {this.state.lastSampleTime} ms</Paragraph>}\r\n          {this.state.statsShown && <Paragraph>End of test. Please check below for results.</Paragraph>}\r\n        </div>\r\n        <Button onClick={(ev) => this.startFiveMinPVT(ev)}>Start 5 min PVT</Button>\r\n        <Button onClick={(ev) => this.startTenMinPVT(ev)}>Start 10 min PVT</Button>\r\n        {this.state.timeSelected && <Button onClick={(ev) => this.endEarly(ev)}>End PVT</Button>}\r\n        <br/>\r\n        {this.state.statsShown &&\r\n        <div>\r\n          <br/>\r\n          <Paragraph>The main thing that the PVT measures is the number of attentional lapses (defined as having a reaction time >500 ms). You had {this.lapses} lapse(s).</Paragraph>\r\n          {this.state.resultText}\r\n          <br/>\r\n          <Paragraph>Other stats that may be useful:</Paragraph>\r\n          <UnorderedList>\r\n            <ListItem>Average reaction time: {this.meanReactionTime} ms</ListItem>\r\n            <ListItem>Number of false starts (reaction time &lt;100 ms/rectangle doesnt appear): {this.falseStarts}</ListItem>\r\n          </UnorderedList>\r\n        </div>}\r\n        <br/>\r\n        <Paragraph>If you'd like to see a little more about how the PVT works, click on the \"What's going on?\" tab.</Paragraph>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PVT;\r\n","import React, { Component } from \"react\";\r\nimport { Paragraph, Image, Small } from 'evergreen-ui';\r\nimport pvtImage from './pvt_sleepiness.png';\r\nimport subjectiveImage from './subjective_sleepiness.gif';\r\n\r\nclass Discussion extends Component {\r\n  render() {\r\n    return (\r\n      <div align=\"left\" style={{paddingRight: 20}}>\r\n        <br/>\r\n        <Paragraph>We're actually aren't very accurate at judging how little sleep we get. In the diagrams below from research papers,\r\n          the PVT accurately separates out how tired you are based on how little sleep you get. However, the mean sleepiness score,\r\n          which was measured subjectively (by asking the participants), isn't totally accurate as there is an overlap between 9 hrs/night and 7 hrs/night.\r\n        </Paragraph>\r\n        <br/>\r\n        <Image src={pvtImage} width=\"45%\" maxWidth={338} />\r\n        <Image src={subjectiveImage} width=\"55%\" maxWidth={412} />\r\n        <Paragraph size={300}>Image on the left: PVT lapses (reaction time >500 ms) with 8hrs/night of sleep (diamond),\r\n          6 hrs (white square), 4 hrs (circle), no sleep (black square); Image on the right: how tired people report they are\r\n          (higher is more tired) vs hrs of sleep per night</Paragraph>\r\n        <br/>\r\n        <br/>\r\n        <Paragraph>\r\n          One thing that this test indirectly measures is microsleeps (that is, falling asleep for a very short time,\r\n          without you realizing it). This is one of the reasons sleep scientists use the PVT test instead of asking\r\n          for subjective sleepiness.</Paragraph>\r\n        <br/>\r\n        <Paragraph>If you're sleep deprived but don't know it, it's best to increase the time you sleep or improve your\r\n          sleep quality. For some resources on how to get more/better sleep,\r\n          you can click <a href='https://www.nhlbi.nih.gov/health-topics/sleep-deprivation-and-deficiency'>here</a>.</Paragraph>\r\n        <br/>\r\n        <Paragraph size={300}>Image sources: (left) Dorrian, Rogers, Dinges (2005), Psychomotor Vigilance Performance: Neurocognitive Assay Sensitive to Sleep Loss; (right) Belenky et al. (2003), Patterns of performance degradation and restoration during sleep restriction and subsequent recovery: a sleep dose‐response study\r\n        </Paragraph>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Discussion;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Pane, Tab, Tablist} from 'evergreen-ui';\nimport PVT from './PVT';\nimport Discussion from \"./Discussion\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: 0,\n      components: [<PVT />, <Discussion />]\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Pane width=\"100%\" height=\"45px\" padding=\"10px\" alignItems=\"center\" display=\"flex\" borderBottom=\"1px solid #40404055 \">\n          <Tablist>\n            <Tab height={30} fontSize={20} onSelect={() => this.setState({ selectedIndex: 0 })}>\n              The PVT\n            </Tab>\n            <Tab height={30} fontSize={20} onSelect={() => this.setState({ selectedIndex: 1 })}>\n              What's going on?\n            </Tab>\n          </Tablist>\n        </Pane>\n        <Pane width=\"100%\" height=\"100%\" paddingLeft={20}>\n        {this.state.components[this.state.selectedIndex]}\n        </Pane>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pvt_sleepiness.91e98cca.png\";","module.exports = __webpack_public_path__ + \"static/media/subjective_sleepiness.4154de8f.gif\";"],"sourceRoot":""}